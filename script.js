

// ================================= SUBSTRING ============================================>>>>
//   Метод substr возвращает подстроку из строки (исходная строка при этом не изменяется).

// Первый параметр задает номер символа, с которого метод начинает отрезать 
// (учтите, что нумерация с нуля), а второй параметр - сколько символов отрезать.
// Первый параметр может принимать отрицательные значения.
//  В этом случае отсчет символа, с которого начинается обрезание, будет идти с конца строки. 
//  Причем последний символ имеет номер -1, предпоследний - -2 и так далее.
// Второй параметр не является обязательным, если он не указан, то вырезаны будут все символы до конца строки.
// Синтаксис
// строка.substr(откуда отрезать, [сколько символов отрезать])


//  Метод substring возвращает подстроку из строки (исходная строка при этом не изменяется).

// Первый параметр задает номер символа, с которого метод начинает отрезать
//  (учтите, что нумерация с нуля), а второй параметр - номер символа,
//   на котором следует закончить вырезание (символ с этим номером не включается в вырезанную часть).

// Второй параметр не является обязательным, если он не указан, то вырезаны будут все символы до конца строки.

// Если первый параметр больше второго, тогда substring ведет себя, как будто они поменялись местами. Например, написать str.substring(3, 0) все равно что написать str.substring(0, 3).

// Если какой-то из параметров больше, чем длина строки - он считается равным длине строки.

// Отрицательные значения приравниваются к нулю.
// Синтаксис
// строка.substring(откуда начать отрезать, [докуда отрезать])

// let str = 'eksbo' ;
// let sub = str.substring(3);
// let sub1 = str.substring(3 , 5);
// console.log(sub);
// console.log(sub1);


// ====================================== SLICE ================================================>>>>

// Метод slice возвращает подстроку из строки (исходная строка при этом не изменяется).

// Первым параметром указывается номер символа строки, с которого начинается вырезание, 
// а вторым параметром - номер символа, на котором закончится вырезание 
// (при этом символ с этим номером не включится в вырезанную часть).

// Второй параметр не является обязательным.
//  Если его не указать - подстрока возьмется с указанного в первом параметре символа до конца строки.

// Второй параметр также может принимать отрицательные значения. В этом случае отсчет символа, 
// на котором закончится обрезание, начинается с конца строки. Причем последний символ имеет номер -1, предпоследний - -2 и так далее.

// К примеру, если написать slice(1, -1), то вырезанная часть возьмется с первого
//  символа включительно по последний не включая его. 
//  Если вам нужно включить и последний символ - нужно просто не задавать второй параметр для slice,
//   вот так: slice(1).
// Если второй параметр меньше первого - возвратится пустая строка.
// Синтаксис
// строка.slice(откуда отрезать, [докуда отрезать])

// let str = 'eksbo'
// let slice = str.slice( 0 , 3 ) ;
// let slice1 = str.slice( 0 , -2 ) ;
// let slice2 = str.slice( 3 ) ;
// console.log(slice);
// console.log(slice1);
// console.log(slice2);

// Дана строка 'я учу javascript!'. Вырежьте из нее слово 'учу' и слово 'javascript' 
// тремя разными способами (через substr, substring, slice). 
// let str = 'я учу javascript!' ;
// let sub = str.substring( 1 , 5 ) ;
// let slice = str.slice( 1 , 5 )
// console.log(sub);
// console.log(slice);


// =========================================  INDEXOF  ============================================>>>>

//  Метод indexOf осуществляет поиск подстроки (указывается первым параметром) в строке.

// Метод вернет позицию первого совпадения, а если оно не найдено, то вернет -1.
// Вторым параметром (он необязателен) можно передать номер символа, откуда следует начинать поиск.
// Метод чувствителен к регистру символов.
// Синтаксис
// строка.indexOf(что ищем, [откуда начинать поиск]);
// let str = 'Я учу учу Javascript';
// console.log(str.indexOf('учу'));

// =========================================  lastIndexOf  ============================================>>>>


// Метод lastIndexOf осуществляет поиск подстроки (указывается первым параметром) в строке.
//  Поиск ведется с конца строки.
// Метод вернет позицию первого совпадения, а если оно не найдено, то вернет -1.
// Вторым параметром (он необязателен) можно передать номер символа, откуда следует начинать поиск.
// Метод чувствителен к регистру символов.
// Синтаксис
// строка.lastIndexOf(что ищем, [откуда начинать поиск]);

// let str = 'Б..Б..Б';
// console.log(str.lastIndexOf('Б'));

// Дана строка 'abcde'. Определите позицию буквы 'c' в этой строке. 
// let str = 'abcde'
// let inOf = str.indexOf('c');
// console.log(inOf);

// Дана строка. Проверьте, есть ли в этой строке символ 'a'.
// let str = 'abcde'
// let inOf = str.indexOf('a');
// console.log(inOf); 

// Дана строка. Проверьте, начинается ли эта строка с символа 'a'. 
// let str = 'abcde'
// let inOf = str.indexOf('a');
// if ( inOf == 0 )
// {
//     console.log("Yes");
// }else{
//     console.log("no");
// }

// Дана строка. Проверьте, заканчивается ли эта строка на символ 'a'. 
// let str = 'abcde'
// let inOf = str.lastIndexOf('a');

// if ( inOf == str.length-1 )
// {
//     console.log("Yes");
// }else{
//     console.log("no");
// }

// Дана строка. Проверьте, начинается ли эта строка на 'http://'. 

// let str = 'http://abcde' ;
// let sub = str.substring( 0 , 7 ) ;
// console.log(sub);
// let k = 'http://'
// if(sub == k ){
//     console.log('Yes');
// }else {
//     console.log('No');
// }

// Дана строка. Проверьте, заканчивается ли эта строка на '.html'. 
// let str = 'http://abcde.html' ;
// let sub = str.slice( -5 ,str.length)
// console.log(sub);
// let k = '.html'
// if(sub == k ){
//     console.log('Yes');
// }else {
//     console.log('No');
// }


// =========================================  startsWith()  ============================================>>>>


// Метод startsWith() помогает определить, начинается ли строка с символов указанных в скобках,
//  возвращая, соответственно, true или false.
// Синтаксис
// str.startsWith(searchString[, position])
// Параметры
// searchString Символы, искомые в начале данной строки.
// position  Необязательный параметр. Позиция в строке, с которой начинать поиск
//   searchString; по умолчанию 0. 

// var str = 'Быть или не быть, вот в чём вопрос.';

// console.log(str.startsWith('Быть'));        // true
// console.log(str.startsWith('не быть'));     // false
// console.log(str.startsWith('не быть', 9));  // true
// let str = 'http://abcde.html' ;
// console.log(str.startsWith('http://')); 


// =========================================  endsWith()  ============================================>>>>


// Метод endsWith() позволяет определить, заканчивается ли строка символами указанными в скобках,
//  возвращая, соответственно, true или false.
// Синтаксис
// str.endsWith(searchString[, length])
// Параметры
// searchString Символы, искомые в конце строки.
// length Необязательный параметр.
//      Позволяет искать внутри строки, обрезая её по диапазону;
//       по умолчанию равен длине строки. 

// let str = 'http://abcde.html' ;
// console.log(str.endsWith('.html')); 


// =========================================  split  ============================================>>>>

//  Метод split осуществляет разбиение строки в массив по указанному разделителю.

// Разделитель указывается первым необязательным параметром. Если он не задан - вернется вся строка. 
// Если он задан как пустые кавычки '' - то каждый символ строки попадет в отдельный элемент массива.

// Вторым необязательным параметром можно указать максимальное количество элементов в получившемся
//  массиве (см. примеры).
// Синтаксис
// строка.split([разделитель], [максимальное количество элементов])

// let str = 'html css javascript';
// let arr = str.split(' ' , 2 );

// console.log(arr);
// Дана строка '1-2-3-4-5'.
//  С помощью метода split запишите каждое число этой строки в отдельный элемент массива. 
// let str = '1-2-3-4-5';
// let arr = str.split('-') ;
// console.log(arr);

// Дана строка '12345'.
//  С помощью метода split запишите каждый символ этой строки в отдельный элемент массива. 
// let str = '12345' ;
// let arr = str.split('') ;
// console.log(arr);
// for ( let i = 0 ; i <= arr.length-1 ; i ++){
//   arr[i]=Number (arr[i])}
// console.log(arr);


// =========================================  join  ============================================>>>>

//  Метод join объединяет элементы массива в строку с указанным разделителем 
// (он будет вставлен между элементами массива).

// Разделитель задается параметром метода и не является обязательным.
//  Если он не задан - по умолчанию в качестве разделителя возьмется запятая. 
//  Если вы хотите слить элементы массива без разделителя - укажите его как пустую строку ''.
// Синтаксис
// массив.join([разделитель])
// let arr = [1, 2, 3];
// let str = arr.join('-');

// console.log(str);

//  Дан следующий массив:
// let arr = [1, 2, 3, 4, 5];
// С помощью метода join слейте его в строку '1-2-3-4-5'. 

// let arr = [1, 2, 3, 4, 5];
// let str = arr.join('-') ;
// console.log(str);

// =========================================  push  ============================================>>>>

// Метод push добавляет неограниченное количество элементов в конец массива. 
// При этом исходный массив изменяется, а результатом возвращается новая длина массива.
// Синтаксис
// массив.push(элемент, элемент, элемент...)
// let arr = ['a', 'b', 'c', 'd', 'e'];

// arr.push('1', '2');
// console.log(arr);


// =========================================  unshift  ============================================>>>>

//  Метод unshift добавляет неограниченное количество новых элементов в начало массива. 
// При этом исходный массив изменяется, а результатом возвращается новая длина массива.
// Синтаксис
// массив.unshift(элемент, элемент, элемент...);
// let arr = ['a', 'b', 'c', 'd', 'e'];
// arr.unshift('1', '2');

// console.log(arr);



// =========================================  shift  ============================================>>>>

// Метод shift

// Метод shift удаляет первый элемент из массива. 
// При этом исходный массив изменяется, а результатом метода возвращается удаленный элемент.
// Синтаксис
// массив.shift();
// let arr = ['a', 'b', 'c', 'd', 'e'];

// arr.shift();
// console.log(arr);



// =========================================  pop  ============================================>>>>

//  Метод pop удаляет последний элемент из массива. При этом исходный массив изменяется, 
// а результатом метода возвращается удаленный элемент.
// Синтаксис
// массив.pop()
// let arr = ['a', 'b', 'c', 'd', 'e'];

// arr.pop();
// console.log(arr);



// =========================================  splice  ============================================>>>>

// Метод splice удаляет или добавляет элементы в массив. Можно только удалять элементы,
//  только добавлять или делать и то и другое одновременно. Метод очень универсальный 
//  и сложный для понимания.

// Метод изменяет сам массив и возвращает при этом массив удаленных элементов.

// Первым параметром метод принимает номер элемента массива, который нужно удалить.
//  Вторым параметром - сколько элементов массива следует удалить. Если его поставить в 0 
//  - то элементы удалены не будут (только добавлены новые).

// Дальше через запятую идут элементы, которые нужно добавить в массив 
// (являются необязательными параметрами). Эти элементы добавятся вместо удаленных элементов массива.

// Если удаления не было (когда второй параметр 0) - элементы вставятся в массив начиная 
// с той позиции, которая указана первым параметром метода.

// Первый параметр может иметь отрицательное значение. В этом случае отсчет позиции начнется не 
// с начала массива, а с конца. Причем, последний элемент имеет номер -1, предпоследний -2 и так далее.
// Синтаксис
// массив.splice(откуда удаляем, сколько элементов удаляем, [вставить элемент],
// let arr = ['a', 'b', 'c', 'd', 'e'];

// arr.splice(1, 3);
// console.log(arr);

// let arr = ['a', 'b', 'c', 'd', 'e'];

// arr.splice(2, 1, '1', '2', '3');
// console.log(arr);


// =========================================  indexOf()  ============================================>>>>

// Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден 
// в массиве или -1, если такого индекса нет.
// Синтаксис
// arr.indexOf(searchElement[, fromIndex = 0])
// Параметры

// searchElement
//     Искомый элемент в массиве.
// fromIndex
//     Индекс, с которого начинать поиск.
//      Если индекс больше или равен длине массива, возвращается -1, что означает, 
//      что массив даже не просматривается. Если индекс является отрицательным числом, 
//      он трактуется как смещение с конца массива. Обратите внимание: если индекс отрицателен, 
//      массив всё равно просматривается от начала к концу. Если рассчитанный индекс 
//      оказывается меньше 0, поиск ведётся по всему массиву. Значение по умолчанию равно 0, 
//      что означает, что просматривается весь массив. 
// var array = [2, 5, 9];
// array.indexOf(2);     // 0
// array.indexOf(7);     // -1
// array.indexOf(9, 2);  // 2
// array.indexOf(2, -1); // -1
// array.indexOf(2, -3); // 0

//  Дан следующий массив:
// [1, 2, 3]

// Добавьте ему в конец элементы 4, 5, 6. 

// let arr = [1, 2, 3] ;
// arr.push( 4 ,5, 6);
// console.log(arr);

// Дан следующий массив:
// [1, 2, 3]

// Добавьте ему в начало элементы 4, 5, 6. 
// let arr = [1, 2, 3] ;
// arr.unshift(4 ,5 ,6)
// console.log(arr);

//  Дан следующий массив:
// [1, 2, 3]

// Выведите на экран первый элемент этого массива. 
//  Выведите на экран последний элемент этого массива. 
// let arr = [1, 2, 3] ;
// let k = arr.shift()
// let y = arr.pop()

// console.log(k);
// console.log(y);

// Дан следующий массив:
// [1, 2, 3, 4, 5]

// Сделайте из этого массива следующий:
// [1, 2, 3]
// let arr =  [1, 2, 3, 4, 5]
// arr.splice(3, arr.length);
// console.log(arr);
// let k = arr.slice(0 ,3)
// arr = k 
// console.log(arr);

//  Дан следующий массив:
// [1, 2, 3, 4, 5]

// С помощью метода splice преобразуйте массив в следующий:
// [1, 4, 5]
// let arr = [1, 2, 3, 4, 5] ;
// arr.splice(1 ,2) ;
// console.log(arr);

//  Дан следующий массив:
// [1, 2, 3, 4, 5]

// С помощью метода splice сделайте из него массив:
// [1, 2, 3, 'a', 'b', 'c', 4, 5]
// let arr = [1, 2, 3, 4, 5] ;
// arr.splice(3, 0, 'a', 'b', 'c');
// console.log(arr);


// Дан следующий массив: 
// [1, 2, 3, 4, 5]

// С помощью метода splice сделайте из него массив:
// [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e']

// let arr = [1, 2, 3, 4, 5] ;
// arr.splice(1 , 0 , 'a' , 'b');
// arr.splice(6 , 0 , 'c' );
// arr.splice(arr.length , 0 , 'e' );

// console.log(arr);

// Дан следующий массив:
// [1, 2, 3, 4, 5]

// Найдите позицию числа 3 в этом массиве. 
// let arr =  [1, 2, 3, 4, 5] ;
// console.log(arr.indexOf(3));


// Дан следующий массив:
// [1, 2, 3, 4, 5]

// Проверьте, есть ли в этом массиве число 3.
// let arr =  [1, 2, 3, 4, 5] ;
// console.log( arr.includes(3)); 